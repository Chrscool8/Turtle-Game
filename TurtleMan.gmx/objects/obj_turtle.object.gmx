<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_turtle_back</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>turtle_dir = 90;
spd = 1;
image_speed = .25;
z = 0;
zsp = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>turtle_dir += (keyboard_check(vk_left)-keyboard_check(vk_right));

if (keyboard_check(vk_up))
{
    x += lengthdir_x(spd, turtle_dir);
    y += lengthdir_y(spd, turtle_dir);
}

if (keyboard_check(vk_down))
{
    x -= lengthdir_x(spd, turtle_dir);
    y -= lengthdir_y(spd, turtle_dir);
}

image_speed = keyboard_check(vk_anykey)*spd/8;

spd = (keyboard_check(vk_shift)*4+1.5);

if (keyboard_check_pressed(vk_space) and z==0)
    zsp = spd;

z += zsp;
zsp -= .3;

if (z &lt;= 0)
{
    z = 0;
    zsp = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var cam_rot = turtle_dir-90; //point_direction(x, y, obj_camera.x, obj_camera.y);

shader_set(shd_ball);
if instance_exists(obj_camera)
    center_set(obj_camera.x-x, obj_camera.y-y, 0);
d3d_transform_set_identity();
//d3d_transform_add_translation(0, 0, 0);
d3d_transform_add_rotation_x(-45);
d3d_transform_add_rotation_z(cam_rot);
d3d_transform_add_translation(x, y, z);
d3d_draw_wall(-32, 0, 64, 32, 0, 0, sprite_get_texture(sprite_index, image_index), 1, 1);
d3d_transform_set_identity();
d3d_transform_add_scaling(2.5, 2.5, 1);
d3d_transform_add_translation(x, y+4, .01);
draw_set_alpha(.6)
//d3d_draw_floor(-8, -8, 0, 8, 8, 0, sprite_get_texture(spr_shadow, 0), 1, 1);
draw_set_alpha(1)
d3d_transform_set_identity();
shader_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
